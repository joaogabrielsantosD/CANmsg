#include <Arduino.h>
#include <Ticker.h>
...
#include <CANmsg.h>

#define ID  0x100
#define ID_ 0x200

Ticker ticker1;
Ticker ticker2;

// Set the CAN pins and the frequecy in bits per seconds to initialize the protocol
CANmsg txMsg(CAN_RX_id, CAN_TX_id, CAN_BPS_1000K /* You can choose another frequecy if you want */);
 
/* Tickers */
bool t1 = false, t2 = false;
void ticker1ISR(void);
void ticker2ISR(void);

/* Callback */
void canISR(CAN_FRAME *rxMsg);

void setup() 
{
  Serial.begin(115200);

  /* CAN-BUS initialize */
  // Pass the Callback function how parameter to set the receive ISR
  txMsg.init(canISR);

  ticker1.attach(1.0, ticker1ISR);
  ticker2.attach(2.0, ticker2ISR);
}

void loop()
{
    uin16_t sq=0, sq1=0, sq2=0, sq3=0; // The sum of this variable is 8 bytes
    // uin16_t have 2 bytes 

    double r = -34.234122; // This variable have 8 bytes, the max of the CAN bus support
    // sizeof(double) == 8

    if(t1)
    {
        txMsg.clear(ID);  // Set the ID and reset the old message
        txMsg << sq << sq1 << sq2 << sq3; // Append the value inside the buffer in order(First is sq...)
        if(txMsg.write()) // Send the message, if successfully print in the serial
            Serial.println("OK!")

        t1 = false;
    }

    if(t2)
    {
        txMsg.clear(ID_); // Set the ID and reset the old message
        txMsg << r;       // Append the value inside the buffer
        txMsg.write()     // Send the message
        
        t2 = false;
    }
    
    vTaskDelay(100);
}


double rec = 0.0;
/* Callback to receive the message */
void canISR(CAN_FRAME *rxMsg)
{
    // print the CAN ID
    Serial.print("ID = 0x"); Serial.print(rxMsg->id, HEX);

    // print the CAN message in uint8_t buffer
    Serial.println();
    for(int i = 0; i < 8; i++)
    {
        Serial.printf("%02X\t", rxMsg->data.uint8[i]);
    }
    Serial.println();

    // print the real message
    if(rxMsg->id==ID_)
    {
        memcpy(&rec, (double *)rxMsg->data.uint8, sizeof(double));
        //Serial.printf("Msg = %lf\r\n", rec);
    }
    Serial.println("\r\n");
}

void ticker1ISR()
{
    t1 = true;
}
void ticker2ISR()
{
    t2 = true;
}